import { useParams, useNavigate } from "react-router-dom"; // Import useNavigate
import { useEffect, useState, useRef } from "react";
import { Button } from "./button"; 
import { Badge } from "./badge";
import CodeEditor from "./CodeEditor";
import axios from 'axios';
import { executeCode } from './api'; // Ensure this points to your API function for code execution

export default function QuestionDetail() {
  const [question, setQuestion] = useState(null);
  const [expectedOutput, setExpectedOutput] = useState(null);
  const { id } = useParams(); 
  const navigate = useNavigate(); // Create navigate instance
  const [code, setCode] = useState(''); 
  const [language, setLanguage] = useState('cpp'); // Default language
  const editorRef = useRef(null);
  
  // Output states
  const [output, setOutput] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState(false);
  const [comparisonResult, setComparisonResult] = useState(null);
  const [showPopup, setShowPopup] = useState(false); // State for popup visibility

  useEffect(() => {
    const fetchQuestion = async () => {
      try {
        const response = await axios.get('http://localhost:5000/questions');
        if (response.data.questions) {
          const foundQuestion = response.data.questions.find(q => q._id === id);
          if (foundQuestion) {
            setQuestion(foundQuestion);
            setExpectedOutput(foundQuestion['Expected Output']);
          } else {
            console.error("Question not found for ID:", id);
          }
        }
      } catch (error) {
        console.error("Error fetching questions:", error);
      }
    };
  
    fetchQuestion();
  }, [id]);

  const normalizeOutput = (output) => {
    // Remove surrounding quotes and trim spaces
    return output.trim().replace(/^"|"$/g, '').replace(/\s+/g, ' ');
  };
  
  const runCode = async () => {
    const sourceCode = editorRef.current.getValue();
    if (!sourceCode) return;
    try {
      setIsLoading(true);
      const { run: result } = await executeCode(language, sourceCode);
      setOutput(result.output.split("\n"));
      setIsError(!!result.stderr);
  
      // Compare the output with expected output
      if (expectedOutput) {
        const userOutput = normalizeOutput(result.output);
        const expected = normalizeOutput(expectedOutput);
        if (userOutput === expected) {
          setComparisonResult("Correct! Your output matches the expected output.");
          setShowPopup(true); // Show popup when output is correct
        } else {
          setComparisonResult(`Incorrect! Your output: "${userOutput}" does not match the expected output: "${expected}".`);
        }
      } else {
        console.error("Expected output is undefined.");
        setComparisonResult("Expected output is not available.");
      }
    } catch (error) {
      console.error(error);
      alert(`An error occurred: ${error.message || "Unable to run code"}`);
    } finally {
      setIsLoading(false);
    }
  };
  

  if (!question) { 
    return <div>Loading...</div>;
  }

  return (
    <div className="flex flex-col h-screen bg-background">
      <main className="flex-1 grid grid-cols-3 gap-6 p-6">
        <div className="col-span-1 bg-card rounded-lg shadow-md p-6">
          <div className="flex justify-between mb-4">
            <h2 className="text-xl font-bold">Current Question</h2>
            {question.difficulty && (
              <Badge variant="secondary" className="text-xs">
                {question.difficulty}
              </Badge>
            )}
          </div>
          <div className="bg-muted rounded-md p-4 text-left">
            <h3 className="text-lg font-semibold mb-4">{question['Question Title']}</h3>
            <h4 className="text-muted-foreground">{question['Question Text']}</h4>
            <p className="text-muted-foreground my-4"><strong>Tags: </strong> {question['Topic Tagged text'] || 'Tags not available'}</p>
            <p className="text-muted-foreground my-4"><strong>Input:</strong> {question['Input']}</p>
            <p className="text-muted-foreground my-4"><strong>Output:</strong> {question['Expected Output'] || 'Output not available'}</p>
          </div>
        </div>

        <div className="col-span-2 bg-card rounded-lg shadow-md p-6 relative">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-bold">Code Editor</h2>
            <div className="flex items-center space-x-4">
              <Button variant="outline" size="sm" onClick={runCode} className="bg-green-600 text-black">
                {isLoading ? "Running..." : "Run Code"}
              </Button>
            </div>
          </div>
          <CodeEditor ref={editorRef} language={language} onChange={(newValue) => setCode(newValue)} />
          <div className="mt-4">
            {isError && <p className="text-red-600">Error occurred during execution.</p>}
            <div>
              <h3>Output:</h3>
              <pre>{output && output.join("\n")}</pre>
            </div>
            <p>{comparisonResult}</p>
          </div>
        </div>
      </main>

      {showPopup && ( // Conditional rendering for popup
        <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-4 rounded shadow-lg z-50">
          <p>{comparisonResult}</p>
          <p>Redirecting...</p>
        </div>
      )}
    </div>
  );
}
